#pragma once
#include <cstdint>
#include <fstream>
#include <cstring>
#include <vector>
#include <SDL3/SDL_render.h>
#include "SDLBeep.h"
#include "Opcodes.h" 

struct instruction_t
{
    uint16_t opcode; // 2-byte opcode
    uint8_t x; // Second nibble of the opcode
    uint8_t y; // Third nibble of the opcode
    uint8_t n; // Fourth nibble of the opcode
    uint8_t nn; // Last byte of the opcode
    uint16_t nnn; // Last 3 nibbles of the opcode


    instruction_t()
        : opcode(0), x(0), y(0), n(0), nn(0), nnn(0)
        {}
    instruction_t(uint16_t op)
        : opcode(op),
          x((op & 0x0F00) >> 8),
          y((op & 0x00F0) >> 4),
          n(op & 0x000F),
          nn(op & 0x00FF),
          nnn(op & 0x0FFF)
        {}
};

class Chip8
{
    public:
        uint8_t memory[4096]; // 4KB of memory
        bool display[128][64];
        //bool highResDisplay[128 * 64]; // High-resolution display for Super Chip-8
        std::vector<uint16_t> stack; // Chip8 stack using vector
        uint8_t V[16]; // 16 registers (V0 to VF)
        uint16_t I; // Index register
        uint8_t delayTimer; // Delay timer
        uint8_t soundTimer; // Sound timer
        uint16_t pc; // Program counter - current instruction address
        std::string currentRom; // Current ROM being executed
        bool highResDisplay = false; // Flag for high-resolution display
        bool keypad[16]; // 16 keys for input (0x0 to 0xF)
        void updateTimers();
        void handleInput();
        void emulateInstruction();
        void loadRom(const std::string& romPath);
        void updatec8display();
        SDL_Texture* getDisplayTexture() const;
        enum emulationState { RUNNING, PAUSED, STOPPED };
        emulationState state;
        SDLBeep beeper;
        instruction_t currentInstruction;
        Chip8(const std::string& romPath);
        const uint8_t font[80] = 
        {
            0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
            0x20, 0x60, 0x20, 0x20, 0x70, // 1
            0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
            0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
            0x90, 0x90, 0xF0, 0x10, 0x10, // 4
            0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
            0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
            0xF0, 0x10, 0x20, 0x40, 0x40, // 7
            0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
            0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
            0xF0, 0x90, 0xF0, 0x90, 0x90, // A
            0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
            0xF0, 0x80, 0x80, 0x80, 0xF0, // C
            0xE0, 0x90, 0x90, 0x90, 0xE0, // D
            0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
            0xF0, 0x80, 0xF0, 0x80, 0x80  // F

        };
        const uint8_t superFont[160] =
        {
            0xFF, 0xFF, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xFF, 0xFF,
            0x0C, 0x0C, 0x3C, 0x3C, 0x0C, 0x0C, 0x0C, 0x0C, 0x3F, 0x3F,
            0xFF, 0xFF, 0x03, 0x03, 0xFF, 0xFF, 0xC0, 0xC0, 0xFF, 0xFF,
            0xFF, 0xFF, 0x07, 0x07, 0xFF, 0xFF, 0x07, 0x07, 0xFF, 0xFF,
            0xC3, 0xC3, 0xC3, 0xC3, 0xFF, 0xFF, 0x03, 0x03, 0x03, 0x03,
            0xFF, 0xFF, 0xC0, 0xC0, 0xFF, 0xFF, 0x03, 0x03, 0xFF, 0xFF,
            0xFF, 0xFF, 0xC0, 0xC0, 0xFF, 0xFF, 0xC3, 0xC3, 0xFF, 0xFF,
            0xFF, 0xFF, 0x03, 0x03, 0x0C, 0x0C, 0x30, 0x30, 0x30, 0x30,
            0xFF, 0xFF, 0xC3, 0xC3, 0xFF, 0xFF, 0xC3, 0xC3, 0xFF, 0xFF,
            0xFF, 0xFF, 0xC3, 0xC3, 0xFF, 0xFF, 0x03, 0x03, 0xFF, 0xFF,
            0xFF, 0xFF, 0xC3, 0xC3, 0xFF, 0xFF, 0xC3, 0xC3, 0xC3, 0xC3,
            0xFC, 0xFC, 0xC3, 0xC3, 0xFC, 0xFC, 0xC3, 0xC3, 0xFC, 0xFC,
            0xFF, 0xFF, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xFF, 0xFF,
            0xFC, 0xFC, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xFC, 0xFC,
            0xFF, 0xFF, 0xC0, 0xC0, 0xFF, 0xFF, 0xC0, 0xC0, 0xFF, 0xFF,
            0xFF, 0xFF, 0xC0, 0xC0, 0xFF, 0xFF, 0xC0, 0xC0, 0xC0, 0xC0
        };

        void (*opcodeTable[16])(Chip8&) = {
                &Opcodes::handle0,
                &Opcodes::handle1,
                &Opcodes::handle2,
                &Opcodes::handle3,
                &Opcodes::handle4,
                &Opcodes::handle5,
                &Opcodes::handle6,
                &Opcodes::handle7,
                &Opcodes::handle8,
                &Opcodes::handle9,
                &Opcodes::handleA,
                &Opcodes::handleB,
                &Opcodes::handleC,
                &Opcodes::handleD,
                &Opcodes::handleE,
                &Opcodes::handleF
        };

};


